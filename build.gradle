plugins {
    id 'java'
    id 'groovy'
    id 'application'

    // Code coverage of tests
    id 'jacoco'

    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.nemerosa.versioning" version "2.14.0"
    id "nebula.ospackage" version "8.4.1"
}

repositories {
    jcenter()
}

dependencies {
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.moshi:moshi:1.11.0'
    implementation 'com.serjltt.moshi:moshi-lazy-adapters:2.2'
    implementation 'org.tomlj:tomlj:1.0.0'
    implementation 'org.influxdb:influxdb-java:2.21'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:slf4j-simple:1.7.30'

    testImplementation('org.spockframework:spock-core:2.0-M4-groovy-3.0')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.0')
    testImplementation("org.slf4j:slf4j-simple:1.7.+")
}

application {
    mainClassName = 'biz.nellemann.hmci.Application'
}

test {
    useJUnitPlatform()
}

apply plugin: 'nebula.ospackage'
ospackage {
    packageName = 'hmci'
    release = '1'
    user = 'root'
    packager = "Mark Nellemann <mark.nellemann@gmail.com>"

    into '/opt/hmci'

    from(shadowJar.outputs.files) {
        into 'lib'
    }

    from('build/scriptsShadow') {
        into 'bin'
    }

    from('doc/') {
        into 'doc'
    }

    from(['README.md', 'LICENSE']) {
        into 'doc'
    }

}

buildRpm {
    dependsOn startShadowScripts
    os = "LINUX"
}

buildDeb {
    dependsOn startShadowScripts
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    group = "verification"
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}
test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.4   // TODO: Raise when more tests are implemented
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

jar {
    manifest {
        attributes(
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-User'     : System.properties['user.name'],
            'Build-Version'  : versioning.info.tag ?: (versioning.info.branch + "-" + versioning.info.build),
            'Build-Revision' : versioning.info.commit,
            'Build-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ").toString(),
            'Add-Opens'      : 'java.base/java.lang.invoke' // To ignore "Illegal reflective access by retrofit2.Platform" warnings
        )
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
